#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#    <description>
#    Copyright (C) 2015  Nico Schl√∂mer
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
import argparse
import nfl
import inspect
import sympy
import re
from string import Template

def _main():
    args = _parse_cmd_arguments()

    # http://stackoverflow.com/a/437857/353337
    global_vars = {}
    local_vars = {}
    namespace = {}
    with open(args.infile) as f:
        code = compile(f.read(), args.infile, 'exec')
        exec(code, global_vars, local_vars)

    # loop over the local variables and see if there's anything we can convert
    entities = []
    for name, local_var in local_vars.items():
        if isinstance(local_var, nfl.EdgeOperator):
            entities.append(getCodeEdgeOperator(local_var, name))

    # Plug it all together in main
    with open('templates/main.tpl', 'r') as f:
        main_src = Template(f.read())
        main_content = main_src.substitute({
            'name': 'Poisson',
            'content': '\n'.join(entities)
            })

    # write it
    with open('Poisson.hpp', 'w') as f:
        f.write(main_content)

    return 0

def getCodeEdgeOperator(eo, name):
    # Build LHS 'a'
    assert(isinstance(eo, nfl.EdgeOperator))
    specs = inspect.getargspec(eo.edgeFunction)
    assert(len(specs.args) == 3)

    alpha = sympy.Symbol('edgeCoefficient')
    c0 = sympy.Symbol('controlVolume0')
    c1 = sympy.Symbol('controlVolume1')
    result = eo.edgeFunction(alpha, c0, c1)
    assert(len(result) == 2)
    assert(len(result[0]) == 2)
    assert(len(result[1]) == 2)

    # TODO
    # Check if any of the arguments is not used in the function.
    # (We'll declare them (void) to supress compiler warnings.)

    # template substitution
    with open('templates/EdgeOperator.tpl', 'r') as f:
        src = Template(f.read())
        linop = src.substitute({
            'name': name.upper(), # class names are uppercase
            'edge00': extractCExpression(result[0][0]),
            'edge01': extractCExpression(result[0][1]),
            'edge10': extractCExpression(result[1][0]),
            'edge11': extractCExpression(result[1][1])
            })

    return linop

def extractCExpression(expr):
    from sympy.utilities.codegen import codegen
    [(c_name, c_code), (h_name, c_header)] = codegen(("f", expr), "C")
    res = re.search("f_result = (.*);", c_code)
    return res.group(1)

def integrate_element(expression):
    return

def assemble_rhs(L):
    assert(isinstance(L, nfl.Integral))
    assert(isinstance(L.integrand, nfl.Expression))
    assert(L.measure == 'dx')

    # write to file
    with open('poisson.h', 'w') as outfile:
        outfile.write('class Poisson:\n')
        outfile.write('{\n')
        outfile.write('public:\n')
        outfile.write('Epetra_Vector assembleRhs() {\n')
        outfile.write('}\n')
        outfile.write('};')
    return

def _parse_cmd_arguments():
    parser = argparse.ArgumentParser(
        description='Convert NFL files into C++ headers.'
        )
    parser.add_argument(
            'infile',
            type=str,
            help='input NFL file'
            )
    return parser.parse_args()

if __name__ == '__main__':
    _main()
