#! /usr/bin/env python
# -*- coding: utf-8 -*-
import numpy as np
import time

import mesh_io


def _main():
    # get the command line arguments
    args = _parse_options()

    # read the mesh
    print 'Reading mesh...',
    start = time.time()
    vtk_mesh = mesh_io.read(args.infile)
    elapsed = time.time()-start
    print 'done. (%gs)' % elapsed

    num_nodes = vtk_mesh.GetNumberOfPoints()

    # construct the points list
    points = np.empty(num_nodes, np.dtype((float, 3)))
    for k in range(num_nodes):
        points[k] = np.array(vtk_mesh.GetPoint(k))

    # create values
    print 'Creating psi...',
    start = time.time()
    psi = np.empty(num_nodes, dtype=complex)
    psi[:] = complex(1.0, 0.0)
    #for k, node in enumerate(mesh.node_coords):
        #import random, cmath
        #psi[k] = cmath.rect( random.random(), 2.0 * pi * random.random() )
        #psi[k] = 0.9 * np.cos(0.5 * node[0])
    elapsed = time.time()-start
    print 'done. (%gs)' % elapsed

    # create values
    print 'Creating V...',
    start = time.time()
    V = np.empty(num_nodes)
    V[:] = -1
    #for k, node in enumerate(mesh.node_coords):
        #import random, cmath
        #X[k] = cmath.rect( random.random(), 2.0 * pi * random.random() )
        #X[k] = 0.9 * np.cos(0.5 * node[0])
    elapsed = time.time()-start
    print 'done. (%gs)' % elapsed

    # If this is a 2D mesh, append the z-component 0 to each node
    # to make sure that the magnetic vector potentials can be
    # calculated.
    if points.shape[1] == 2:
        points = np.column_stack((points, np.zeros(len(points))))
    # Add magnetic vector potential.
    print 'Creating A...',
    start = time.time()
    #A = points # field A(X) = X -- test case
    #A = np.zeros((num_nodes,3))
    #B = np.array([np.cos(theta) * np.cos(phi),
                  #np.cos(theta) * np.sin(phi),
                  #np.sin(theta)])
    A = constant_field(points, np.array([0, 0, 1]))
    #A = magnetic_dipole(points,
    #                    x0 = np.array([0,0,2]),
    #                    m = np.array([0,0,1])
    #                    )
    #A = magnetic_dot(points, radius=2.0, heights=[0.1, 1.1])
    #A = np.empty((num_nodes, 3), dtype=float)
    #for k, node in enumerate(points):
        #A[k] = magnetic_dot(node, radius=2.0, height0=0.1, height1=1.1)
    elapsed = time.time()-start
    print 'done. (%gs)' % elapsed

    #if 'thickness' in point_data:
    #    thickness = point_data['thickness']
    #else:
    #    # Add values for thickness:
    #    thickness = np.empty(num_nodes, dtype = float)
    #    alpha = 0.5 # thickness at the center of the tube
    #    beta = 2.0 # thickness at the boundary
    #    t = (beta-alpha) / b**2
    #    for k, x in enumerate(mesh.nodes):
    #        thickness[k] = alpha + t * x[1]**2

    g = 1.0
    mu = 0.0

    # write the mesh
    print 'Writing mesh...',
    start = time.time()
    mesh_io.write(args.outfile,
                  vtk_mesh,
                  point_data={'psi': psi, 'V': V, 'A': A},
                  field_data={'g': g, 'mu': mu})
    elapsed = time.time()-start
    print 'done. (%gs)' % elapsed

    return


def constant_field(X, B):
    '''Converts a spatially constant magnetic field B at X
    into a corresponding potential.'''
    # This is one particular choice that works.
    return 0.5 * np.cross(B, X)


def magnetic_dipole(x, x0, m):
    '''Magnetic vector potential for the static dipole at x0
    with orientation m.'''
    r = x - x0
    # npsum(...) = ||r||^3 row-wise;
    # np.cross acts on rows by default;
    # The ".T" magic makes sure that each row of np.cross(m, r)
    # gets divided by the corresponding entry in ||r||^3.
    return (np.cross(m, r).T / np.sum(np.abs(r)**2, axis=-1)**(3./2)).T


def magnetic_dot(X, magnet_radius, heights):
    '''Magnetic vector potential corresponding to the field that is induced
    by a cylindrical magnetic dot, centered at (0,0,0.5*(height0+height1)),
    with the radius magnet_radius for objects in the x-y-plane.
    The potential is derived by interpreting the dot as an infinitesimal
    collection of magnetic dipoles, hence

       A(x) = \int_{dot} A_{dipole}(x-r) dr.

    Support for input valued (x,y,z), z!=0, is pending.
    '''
    # Span a cartesian grid over the sample, and integrate over it.
    # For symmetry, choose a number that is divided by 4.
    n_phi = 100
    # Choose such that the quads at radius/2 are approximately squares.
    n_radius = int(round(n_phi / np.pi))

    dr = magnet_radius / n_radius

    A = np.zeros((len(X), 3))

    # What we want to have is the value of
    #
    #    I(X) := \int_{dot} \|X-XX\|^{-3/2} (m\times(X-XX)) dXX
    #
    # with
    #
    #    X := (x, y, z)^T,
    #    XX := (xx, yy, zz)^T
    #
    # The integral in zz can be calculated analytically, such that
    #
    #    I = \int_{disk}
    #           [ - (z-zz) / (r2D*sqrt(r3D)) ]_{zz=h_0}^{h_1} ( -(y-yy), x-xx, 0)^T dxx dyy.
    #
    # The integral over the disk is then approximated numerically by
    # the summation over little disk segments.
    # An alternative is to use cylindrical coordinates.
    #
    X_dist = np.empty(X.shape)
    for i_phi in xrange(n_phi):
        beta = 2.0 * np.pi / n_phi * i_phi
        sin_beta = np.sin(beta)
        cos_beta = np.cos(beta)
        for i_radius in xrange(n_radius):
            rad = magnet_radius / n_radius * (i_radius + 0.5)
            # r = squared distance between grid point X to the
            #     point (x,y) on the magnetic dot
            X_dist[:, 0] = X[:, 0] - rad * cos_beta
            X_dist[:, 1] = X[:, 1] - rad * sin_beta

            # r = x_dist * x_dist + y_dist * y_dist
            R = np.sum(X_dist**2, axis=1)
            ind = np.nonzero(R > 1.0e-15)

            # 3D distance to point on lower edge (xi,yi,height0)
            R_3D0 = np.sqrt(R[ind] + heights[0]**2)
            # 3D distance to point on upper edge (xi,yi,height1)
            R_3D1 = np.sqrt(R[ind] + heights[1]**2)
            # Volume of circle segment = pi*angular_width * r^2,
            # so the volume of a building brick of the discretization is
            #   V = pi/n_phi * [(r+dr/2)^2 - (r-dr/2)^2]
            #     = pi/n_phi * 2 * r * dr.
            Alpha = (heights[1]/R_3D1 - heights[0]/R_3D0) / R[ind] \
                    * np.pi / n_phi * (2.0*rad*dr)  # volume
            # ax += y_dist * alpha
            # ay -= x_dist * alpha
            A[ind, 0] += X_dist[ind, 1] * Alpha
            A[ind, 1] -= X_dist[ind, 0] * Alpha
    return A


def _parse_options():
    '''Parse input options.'''
    import argparse
    parser = argparse.ArgumentParser(
            description='Reads a mesh an equips it with a state.'
            )
    parser.add_argument('infile',
                        metavar='INFILE',
                        type=str,
                        help='file that contains the mesh'
                        )
    parser.add_argument('outfile',
                        metavar='OUFILE',
                        type=str,
                        help='file to be written to'
                        )
    args = parser.parse_args()
    return args


if __name__ == "__main__":
    _main()
